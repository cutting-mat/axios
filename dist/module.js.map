{"mappings":";;;AACA,EAAkB,AAAlB,oBAAsB;AAClB,KAAC,CAAC,iCAAW,GAAG,YAAK,CAAC,MAAM;AAGzB,GAAG,CAAC,yCAAa,GAAG,CAAC;AAAA,CAAC;AAE7B,YAAK,CAAC,MAAM,GAAG,QAAQ,CAAE,MAAM,EAAE,CAAC;IAChC,KAAK,CAAC,QAAQ,GAAG,iCAAW,CAAC,MAAM;IACnC,KAAK,CAAC,QAAQ,GAAG,QAAQ,CAAC,GAAG;IAE7B,EAAc,AAAd,sBAAwB;IACd,QAAF,CAAC,GAAG,GAAG,QAAQ,CAAE,IAAG,EAAE,OAAM,EAAE,GAAG,EAAE,CAAC;QAC1C,GAAG,GAAG,MAAM,CAAC,MAAM,CACjB,CAAC;YACC,KAAK,EAAE,IAAI;QACb,CAAC,EACD,GAAG,IAAI,CAAC;QAAA,CAAC;QAGX,KAAK,CAAC,SAAS,GACb,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAM,MAAM,CAAiB,mBACxD,IAAI,CAAC,SAAS,CAAC,OAAM,IACrB,CAAE;QACR,KAAK,CAAC,UAAU,MAAM,IAAG,CAAC,CAAC,EAAE,SAAS;QAEtC,KAAK,CAAC,aAAa,GAAG,QAAQ,CAAE,GAAG,EAAE,MAAM,EAAE,CAAC;YAC5C,MAAM,CAAC,QAAQ,CAAC,GAAG,EAAE,MAAM,EACxB,IAAI,EAAE,GAAG,GAAK,CAAC;gBACd,EAAE,EAAE,GAAG,CAAC,KAAK,KAAK,IAAI,IAAI,GAAG,CAAC,KAAK,KAAK,CAAQ,SAC9C,yCAAa,CAAC,UAAU,EAAE,MAAM,GAAG,CAAU;qBAE7C,MAAM,CAAC,yCAAa,CAAC,UAAU;gBAEjC,MAAM,CAAC,GAAG;YACZ,CAAC,EACA,KAAK,EAAE,GAAG,GAAK,CAAC;gBACf,MAAM,CAAC,yCAAa,CAAC,UAAU;gBAC/B,MAAM,CAAC,GAAG;YACZ,CAAC;QACL,CAAC;QAED,EAAE,GACC,yCAAa,CAAC,UAAU,KACxB,yCAAa,CAAC,UAAU,EAAE,MAAM,KAAK,CAAS,YAC7C,GAAG,CAAC,KAAK,KAAK,CAAQ,WACxB,GAAG,CAAC,KAAK,KAAK,KAAK,AAAC,CAAQ,AAAR,EAAkB,AAAlB,gBAAkB;UAE5B,EAA0B,AAApC,8CAAoC;QACpC,yCAAa,CAAC,UAAU,IAAI,CAAC;YAC3B,MAAM,EAAE,CAAS;YACjB,OAAO,EAAE,aAAa,CAAC,IAAG,EAAE,OAAM;QACpC,CAAC;QAGH,MAAM,CAAC,yCAAa,CAAC,UAAU,EAAE,OAAO;IAC1C,CAAC;IAED,MAAM,CAAC,QAAQ;AACjB,CAAC;IAED,wCAAqB,GAAN,YAAK","sources":["src/axios.js"],"sourcesContent":["import axios from \"axios\";\r\n// 原始 axios.create\r\nconst axiosCreate = axios.create;\r\n\r\n// 请求缓存对象\r\nexport let responseCache = {};\r\n\r\naxios.create = function (config) {\r\n  const instance = axiosCreate(config);\r\n  const axiosGet = instance.get;\r\n\r\n  // 替换实例的 get()\r\n  instance.get = function (url, params, opt) {\r\n    opt = Object.assign(\r\n      {\r\n        cache: null,\r\n      },\r\n      opt || {}\r\n    );\r\n\r\n    const paramsStr =\r\n      Object.prototype.toString.call(params) === \"[object Object]\"\r\n        ? JSON.stringify(params)\r\n        : \"\";\r\n    const requestKey = `${url}?${paramsStr}`;\r\n\r\n    const createPromise = function (url, params) {\r\n      return axiosGet(url, params)\r\n        .then((res) => {\r\n          if (opt.cache === true || opt.cache === \"update\") {\r\n            responseCache[requestKey].status = \"resolved\";\r\n          } else {\r\n            delete responseCache[requestKey];\r\n          }\r\n          return res;\r\n        })\r\n        .catch((err) => {\r\n          delete responseCache[requestKey];\r\n          return err;\r\n        });\r\n    };\r\n\r\n    if (\r\n      !responseCache[requestKey] || // 无缓存\r\n      (responseCache[requestKey].status !== \"pending\" &&\r\n        opt.cache === \"update\") || // 有缓存且要更新缓存\r\n      opt.cache === false // 不需要缓存\r\n    ) {\r\n      // console.log('创建缓存对象', requestKey)\r\n      responseCache[requestKey] = {\r\n        status: \"pending\",\r\n        promise: createPromise(url, params),\r\n      };\r\n    }\r\n\r\n    return responseCache[requestKey].promise;\r\n  };\r\n\r\n  return instance;\r\n};\r\n\r\nexport default axios;\r\n"],"names":[],"version":3,"file":"module.js.map"}