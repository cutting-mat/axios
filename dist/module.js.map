{"mappings":";;;AAEA,KAAK,CAAC,iCAAW,GAAG,YAAK,CAAC,MAAM;AAChC,GAAG,CAAC,8BAAQ;AAEZ,EAAS,AAAT,mBAAqB;AACT,GAAT,CAAC,mCAAa,GAAG,CAAC;AAAA,CAAC;AAEtB,YAAK,CAAC,MAAM,GAAG,QAAQ,CAAE,MAAM,EAAE,CAAC;IAC9B,GAAG,CAAC,QAAQ,GAAG,iCAAW,CAAC,MAAM;IACjC,8BAAQ,GAAG,QAAQ,CAAC,GAAG;IAEvB,QAAQ,CAAC,GAAG,GAAG,QAAQ,CAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC;QACxC,EAMK,AANL,2PAMK,AANL,EAMK,CAEL,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC;YACjB,KAAK,EAAE,KAAK;QAChB,CAAC,EAAE,GAAG,IAAI,CAAC;QAAA,CAAC;QAEZ,GAAG,CAAC,SAAS,GAAI,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,MAAM,CAAiB,mBAAI,IAAI,CAAC,SAAS,CAAC,MAAM,IAAI,CAAE;QAC5G,GAAG,CAAC,UAAU,IAAK,QAAQ,EAAE,GAAG,CAAC,CAAC,EAAE,SAAS;QAE7C,EAAE,EAAE,GAAG,CAAC,KAAK,EAAE,CAAC;YACZ,EAAE,GAAG,mCAAa,CAAC,UAAU,GAAG,CAAC;gBAC7B,OAAO,CAAC,GAAG,CAAC,CAA2B,4BAAE,UAAU;gBACnD,mCAAa,CAAC,UAAU,IAAI,8BAAQ,CAAC,GAAG,EAAE,MAAM;gBAChD,mCAAa,CAAC,UAAU,EAAE,KAAK,KAAO,CAAC;oBACnC,MAAM,CAAC,mCAAa,CAAC,UAAU;gBACnC,CAAC;YACL,CAAC,MACG,OAAO,CAAC,GAAG,CAAC,CAAwB,yBAAE,UAAU;YAGpD,MAAM,CAAC,mCAAa,CAAC,UAAU;QACnC,CAAC,MAAM,CAAC;YACJ,EAAE,EAAC,mCAAa,CAAC,UAAU,GAAE,CAAC;gBAC1B,OAAO,CAAC,GAAG,CAAC,CAA0B,2BAAE,UAAU;gBAClD,MAAM,CAAC,mCAAa,CAAC,UAAU;YACnC,CAAC;YAED,MAAM,CAAC,8BAAQ,CAAC,GAAG,EAAE,MAAM;QAC/B,CAAC;IACL,CAAC;IAED,MAAM,CAAC,QAAQ;AACnB,CAAC;IAED,wCAAqB,GAAN,yDAAK","sources":["src/axios-cache.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst axiosCreate = axios.create;\r\nlet axiosGet;\r\n\r\n// 请求缓存对象\r\nlet responseCache = {}\r\n\r\naxios.create = function (config) {\r\n    let instance = axiosCreate(config);\r\n    axiosGet = instance.get;\r\n\r\n    instance.get = function (url, params, opt) {\r\n        /**\r\n         * get请求缓存功能\r\n         * @param url[String] 请求地址\r\n         * @param params[Object] 请求参数\r\n         * @param opt[Object] 扩展配置，默认值{cache: true}\r\n         * @return [Promise] 请求Promse\r\n         * */\r\n\r\n        opt = Object.assign({\r\n            cache: false\r\n        }, opt || {})\r\n\r\n        let paramsStr = (Object.prototype.toString.call(params) === '[object Object]') ? JSON.stringify(params) : ''\r\n        let requestKey = (`request_${url}?${paramsStr}`)\r\n\r\n        if (opt.cache) {\r\n            if (!responseCache[requestKey]) {\r\n                console.log('cache-axios create cache:', requestKey)\r\n                responseCache[requestKey] = axiosGet(url, params)\r\n                responseCache[requestKey].catch(() => {\r\n                    delete responseCache[requestKey];\r\n                })\r\n            }else{\r\n                console.log('cache-axios use cache:', requestKey)\r\n            }\r\n            \r\n            return responseCache[requestKey]\r\n        } else {\r\n            if(responseCache[requestKey]){\r\n                console.log('cache-axios clear cache:', requestKey)\r\n                delete responseCache[requestKey];\r\n            }\r\n            \r\n            return axiosGet(url, params)\r\n        }\r\n    }\r\n\r\n    return instance;\r\n}\r\n\r\nexport default axios;\r\n"],"names":[],"version":3,"file":"module.js.map"}