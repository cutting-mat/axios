{"mappings":";;;;;;;;;;;;;;;;;AACA,EAAkB,AAAlB,oBAAsB;AAClB,KAAC,CAAC,iCAAW,GAAG,sCAAK,CAAC,MAAM;AAGzB,GAAG,CAAC,yCAAa,GAAG,CAAC;AAAA,CAAC;AAE7B,sCAAK,CAAC,MAAM,GAAG,QAAQ,CAAE,MAAM,EAAE,CAAC;IAC9B,KAAK,CAAC,QAAQ,GAAG,iCAAW,CAAC,MAAM;IACnC,KAAK,CAAC,QAAQ,GAAG,QAAQ,CAAC,GAAG;IAG7B,EAAc,AAAd,sBAAwB;IACd,QAAF,CAAC,GAAG,GAAG,QAAQ,CAAE,IAAG,EAAE,OAAM,EAAE,GAAG,EAAE,CAAC;QAExC,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC;YACjB,KAAK,EAAE,KAAK;QAChB,CAAC,EAAE,GAAG,IAAI,CAAC;QAAA,CAAC;QAEZ,KAAK,CAAC,SAAS,GAAI,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAM,MAAM,CAAiB,mBAAI,IAAI,CAAC,SAAS,CAAC,OAAM,IAAI,CAAE;QAC9G,KAAK,CAAC,UAAU,MAAO,IAAG,CAAC,CAAC,EAAE,SAAS;QAEvC,KAAK,CAAC,aAAa,GAAG,QAAQ,CAAE,GAAG,EAAE,MAAM,EAAE,CAAC;YAC1C,MAAM,CAAC,QAAQ,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,EAAE,GAAG,GAAK,CAAC;gBACxC,EAAE,EAAE,GAAG,CAAC,KAAK,KAAK,IAAI,IAAI,GAAG,CAAC,KAAK,KAAK,CAAQ,SAC5C,yCAAa,CAAC,UAAU,EAAE,MAAM,GAAG,CAAU;qBAE7C,MAAM,CAAC,yCAAa,CAAC,UAAU;gBAEnC,MAAM,CAAC,GAAG;YACd,CAAC,EAAE,KAAK,EAAE,GAAG,GAAK,CAAC;gBACf,MAAM,CAAC,yCAAa,CAAC,UAAU;gBAC/B,MAAM,CAAC,GAAG;YACd,CAAC;QACL,CAAC;QAED,EAAE,GACG,yCAAa,CAAC,UAAU,CAAG,CAAM,AAAN,EAAY,AAAZ,UAAY;YAEjC,yCAAO,CAAC,UAAU,EAAE,MAAM,KAAK,CAAS,aAAK,GAAG,CAAC,KAAK,IAE7D,GAAG,CAAC,KAAK,KAAK,CAAQ,OAAE,CAAY,AAAZ,EAA8B,AAA9B,4BAA8B;UAEpC,EAAkB,AAApC,8CAAoC;QACpC,yCAAa,CAAC,UAAU,IAAI,CAAC;YACzB,MAAM,EAAE,CAAS;YACjB,OAAO,EAAE,aAAa,CAAC,IAAG,EAAE,OAAM;QACtC,CAAC;QAIL,MAAM,CAAC,yCAAa,CAAC,UAAU,EAAE,OAAO;IAC5C,CAAC;IAED,MAAM,CAAC,QAAQ;AACnB,CAAC;IAED,wCAAqB,GAAN,sCAAK","sources":["src/axios.js"],"sourcesContent":["import axios from 'axios';\r\n// 原始 axios.create\r\nconst axiosCreate = axios.create;\r\n\r\n// 请求缓存对象\r\nexport let responseCache = {}\r\n\r\naxios.create = function (config) {\r\n    const instance = axiosCreate(config);\r\n    const axiosGet = instance.get;\r\n\r\n    \r\n    // 替换实例的 get()\r\n    instance.get = function (url, params, opt) {\r\n\r\n        opt = Object.assign({\r\n            cache: false\r\n        }, opt || {})\r\n\r\n        const paramsStr = (Object.prototype.toString.call(params) === '[object Object]') ? JSON.stringify(params) : ''\r\n        const requestKey = (`${url}?${paramsStr}`)\r\n\r\n        const createPromise = function (url, params) {\r\n            return axiosGet(url, params).then((res) => {\r\n                if (opt.cache === true || opt.cache === 'update') {\r\n                    responseCache[requestKey].status = 'resolved';\r\n                } else {\r\n                    delete responseCache[requestKey];\r\n                }\r\n                return res\r\n            }).catch((err) => {\r\n                delete responseCache[requestKey];\r\n                return err\r\n            })\r\n        }\r\n\r\n        if (\r\n            !responseCache[requestKey]  // 无缓存\r\n            ||\r\n            (responseCache[requestKey].status !== 'pending' && !opt.cache)  // 有缓存且不需要缓存\r\n            ||\r\n            opt.cache === 'update'  // 有缓存且要更新缓存\r\n            ) {\r\n            // console.log('创建缓存对象', requestKey)\r\n            responseCache[requestKey] = {\r\n                status: 'pending',\r\n                promise: createPromise(url, params)\r\n            }\r\n\r\n        }\r\n\r\n        return responseCache[requestKey].promise\r\n    }\r\n\r\n    return instance;\r\n}\r\n\r\nexport default axios;\r\n"],"names":[],"version":3,"file":"main.js.map"}